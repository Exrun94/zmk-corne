/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define TOP     3
// HRM Layer Definitions
#define HRM_L_RING_LAYER  6
#define HRM_L_MID_LAYER   7
#define HRM_L_IDX_LAYER   8
#define HRM_R_IDX_LAYER   9
#define HRM_R_MID_LAYER   10
#define HRM_R_RING_LAYER  11
#define HRM_R_PNKY_LAYER  12

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        // Home Row Mods Behaviors
        hrm_s_lshft: hrm_s_lshft {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_S_LSHFT";
            bindings = <&mo HRM_L_RING_LAYER>, <&kp S>;
            tapping-term-ms = <150>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };
        hrm_d_lalt: hrm_d_lalt {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_D_LALT";
            bindings = <&mo HRM_L_MID_LAYER>, <&kp D>;
            tapping-term-ms = <150>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };
        hrm_f_lctrl: hrm_f_lctrl {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_F_LCTRL";
            bindings = <&mo HRM_L_IDX_LAYER>, <&kp F>;
            tapping-term-ms = <150>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };
        hrm_j_rctrl: hrm_j_rctrl {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_J_RCTRL";
            bindings = <&mo HRM_R_IDX_LAYER>, <&kp J>;
            tapping-term-ms = <150>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };
        hrm_k_ralt: hrm_k_ralt {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_K_RALT";
            bindings = <&mo HRM_R_MID_LAYER>, <&kp K>;
            tapping-term-ms = <150>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };
        hrm_l_rshft: hrm_l_rshft {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L_RSHFT";
            bindings = <&mo HRM_R_RING_LAYER>, <&kp L>;
            tapping-term-ms = <150>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };
        hrm_semi_rgui: hrm_semi_rgui {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_SEMI_RGUI";
            bindings = <&mo HRM_R_PNKY_LAYER>, <&kp SEMI>;
            tapping-term-ms = <150>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
        };

        qq: qq {
            compatible = "zmk,behavior-mod-morph";
            label = "QQ";
            bindings = <&kp Q>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        ww: ww {
            compatible = "zmk,behavior-mod-morph";
            label = "WW";
            bindings = <&kp W>, <&kp AT_SIGN>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        ee: ee {
            compatible = "zmk,behavior-mod-morph";
            label = "EE";
            bindings = <&kp E>, <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        rr: rr {
            compatible = "zmk,behavior-mod-morph";
            label = "RR";
            bindings = <&kp R>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        tt: tt {
            compatible = "zmk,behavior-mod-morph";
            label = "TT";
            bindings = <&kp T>, <&kp PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        yy: yy {
            compatible = "zmk,behavior-mod-morph";
            label = "YY";
            bindings = <&kp Y>, <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        uu: uu {
            compatible = "zmk,behavior-mod-morph";
            label = "UU";
            bindings = <&kp U>, <&kp AMPERSAND>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        ii: ii {
            compatible = "zmk,behavior-mod-morph";
            label = "II";
            bindings = <&kp I>, <&kp ASTERISK>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        oo: oo {
            compatible = "zmk,behavior-mod-morph";
            label = "OO";
            bindings = <&kp O>, <&kp LEFT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        pp: pp {
            compatible = "zmk,behavior-mod-morph";
            label = "PP";
            bindings = <&kp P>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB       &kp Q            &kp W            &kp E            &kp R            &kp T                     &kp Y            &kp U            &kp I            &kp O            &kp P            &kp BSPC
&kp CAPSLOCK  &kp A            &hrm_s_lshft     &hrm_d_lalt      &hrm_f_lctrl     &kp G                     &kp H            &hrm_j_rctrl     &hrm_k_ralt      &hrm_l_rshft     &hrm_semi_rgui   &kp SQT
&kp LSHFT     &kp Z            &kp X            &kp C            &kp V            &kp B                     &kp N            &kp M            &kp COMMA        &kp DOT          &kp FSLH         &mo LOWER
                                                &kp LCTRL        &kp LGUI         &kp SPACE                 &kp RET          &mo RAISE        &kp RALT
            >;
        };

        lower_layer {
            bindings = <
&kp TAB    &kp EXCL  &kp AT_SIGN  &kp HASH      &kp DLLR      &kp PRCNT           &kp CARET  &kp AMPS   &kp STAR        &kp LPAR         &kp RPAR  &kp DEL
&trans     &trans    &trans       &kp C_VOL_DN  &kp C_VOL_UP  &kp K_MUTE          &kp LEFT   &kp DOWN   &kp UP          &kp RIGHT        &kp LBKT  &kp GRAVE
&kp LSHFT  &trans    &trans       &kp C_PREV    &kp C_NEXT    &kp C_PLAY_PAUSE    &kp MINUS  &kp EQUAL  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp BSLH  &trans
                                  &trans        &trans        &trans              &trans     &trans     &trans
            >;
        };

        top_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  BRIGHT_UP  |  BRIGHT_DOWN  |  VOL_DOWN  |  VOL_UP  |  MUTE  |      |  -  |  7  |  8  |  9  |  +  | BKSP |
            // | CTRL |             |               |             |         |        |      |  .  |  4  |  5  |  6  |  -  |  `   |
            // | SHFT |             |              |             |          |        |      |  0  |  1  |  2  |  3  |  *  |  /   |
            //                      |              |             |          |         |     |     |     |

            bindings = <
&trans     &kp C_BRI_DN  &kp C_BRI_UP  &kp C_VOL_DN  &kp C_VOL_UP     &kp K_MUTE    &kp KP_N7  &kp KP_N8  &kp KP_N9   &kp KP_PLUS      &trans         &kp BSPC
&trans     &trans        &trans        &trans        &rgb_ug RGB_TOG  &bl BL_TOG    &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_MINUS     &trans         &trans
&kp LSHFT  &trans        &trans        &trans        &trans           &trans        &kp KP_N1  &kp KP_N2  &kp KP_N3   &kp KP_MULTIPLY  &kp KP_DIVIDE  &trans
                                       &kp LCTRL     &kp LEFT_GUI     &trans        &kp KP_N0  &trans     &kp KP_DOT
            >;
        };

        Symbols {
            bindings = <
&kp PIPE              &kp LEFT_BRACE        &kp SQT        &kp GRAVE       &kp DOUBLE_QUOTES  &kp RIGHT_BRACE          &trans          &trans          &trans        &trans           &trans  &trans
&kp NON_US_BACKSLASH  &kp LEFT_PARENTHESIS  &kp LESS_THAN  &kp EQUAL       &kp GREATER_THAN   &kp RIGHT_PARENTHESIS    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans  &trans
&kp QUESTION          &kp LEFT_BRACKET      &kp MINUS      &kp UNDERSCORE  &kp PLUS           &kp RIGHT_BRACKET        &trans          &trans          &trans        &trans           &trans  &trans
                                                           &kp COLON       &kp SLASH          &kp TILDE                &trans          &trans          &trans
            >;
        };

        Number {
            bindings = <
&trans  &mt EXCLAMATION NUMBER_1  &mt AT_SIGN NUMBER_2  &mt HASH NUMBER_3  &mt DOLLAR NUMBER_4  &mt PERCENT N5    &mt CARET NUMBER_6  &mt AMPERSAND N7  &mt ASTERISK N8  &mt LEFT_PARENTHESIS N9  &mt RIGHT_PARENTHESIS N0  &trans
&trans  &trans                    &trans                &trans             &trans               &trans            &trans              &trans            &trans           &trans                   &trans                    &trans
&trans  &trans                    &trans                &trans             &trans               &trans            &trans              &trans            &trans           &trans                   &trans                    &trans
                                                        &trans             &trans               &trans            &trans              &trans            &trans
            >;
        };

        // HRM Bilateral Layers
        hrm_l_ring_layer { // LShift from left 'S'
            bindings = <
            // Left Hand (Same hand as S - normal keys, HRMs are base keys)
            &kp TAB         &kp Q           &kp W           &kp E           &kp R           &kp T           // Right Hand (Opposite hand - LShift + key)
                                                                                                            &kp LS(Y)       &kp LS(U)       &kp LS(I)       &kp LS(O)       &kp LS(P)       &kp LS(BSPC)
            &kp CAPSLOCK    &kp A           &kp S           &kp D           &kp F           &kp G           &kp LS(H)       &kp LS(J)       &kp LS(K)       &kp LS(L)       &kp LS(SEMI)    &kp LS(SQT)
            &kp LSHFT       &kp Z           &kp X           &kp C           &kp V           &kp B           &kp LS(N)       &kp LS(M)       &kp LS(COMMA)   &kp LS(DOT)     &kp LS(FSLH)    &trans
                                                            &kp LCTRL       &kp LGUI        &kp SPACE       &kp LS(RET)     &trans          &trans
            >;
        };

        hrm_l_mid_layer { // LAlt from left 'D'
            bindings = <
            // Left Hand (Same hand as D - normal keys, HRMs are base keys)
            &kp TAB         &kp Q           &kp W           &kp E           &kp R           &kp T           // Right Hand (Opposite hand - LAlt + key)
                                                                                                            &kp LA(Y)       &kp LA(U)       &kp LA(I)       &kp LA(O)       &kp LA(P)       &kp LA(BSPC)
            &kp CAPSLOCK    &kp A           &kp S           &kp D           &kp F           &kp G           &kp LA(H)       &kp LA(J)       &kp LA(K)       &kp LA(L)       &kp LA(SEMI)    &kp LA(SQT)
            &kp LSHFT       &kp Z           &kp X           &kp C           &kp V           &kp B           &kp LA(N)       &kp LA(M)       &kp LA(COMMA)   &kp LA(DOT)     &kp LA(FSLH)    &trans
                                                            &kp LCTRL       &kp LGUI        &kp SPACE       &kp LA(RET)     &trans          &trans
            >;
        };

        hrm_l_idx_layer { // LCtrl from left 'F'
            bindings = <
            // Left Hand (Same hand as F - normal keys, HRMs are base keys)
            &kp TAB         &kp Q           &kp W           &kp E           &kp R           &kp T           // Right Hand (Opposite hand - LCtrl + key)
                                                                                                            &kp LC(Y)       &kp LC(U)       &kp LC(I)       &kp LC(O)       &kp LC(P)       &kp LC(BSPC)
            &kp CAPSLOCK    &kp A           &kp S           &kp D           &kp F           &kp G           &kp LC(H)       &kp LC(J)       &kp LC(K)       &kp LC(L)       &kp LC(SEMI)    &kp LC(SQT)
            &kp LSHFT       &kp Z           &kp X           &kp C           &kp V           &kp B           &kp LC(N)       &kp LC(M)       &kp LC(COMMA)   &kp LC(DOT)     &kp LC(FSLH)    &trans
                                                            &kp LCTRL       &kp LGUI        &kp SPACE       &kp LC(RET)     &trans          &trans
            >;
        };

        hrm_r_idx_layer { // RCtrl from right 'J'
            bindings = <
            // Left Hand (Opposite hand - RCtrl + key)                                                      // Right Hand (Same hand as J - normal keys, HRMs are base keys)
            &kp RC(TAB)     &kp RC(Q)       &kp RC(W)       &kp RC(E)       &kp RC(R)       &kp RC(T)       &kp Y           &kp U           &kp I           &kp O           &kp P           &kp BSPC
            &kp RC(CAPSLOCK)&kp RC(A)       &kp RC(S)       &kp RC(D)       &kp RC(F)       &kp RC(G)       &kp H           &kp J           &kp K           &kp L           &kp SEMI        &kp SQT
            &trans          &kp RC(Z)       &kp RC(X)       &kp RC(C)       &kp RC(V)       &kp RC(B)       &kp N           &kp M           &kp COMMA       &kp DOT         &kp FSLH        &mo LOWER
                                                            &kp RC(LCTRL)   &kp RC(LGUI)    &kp RC(SPACE)   &kp RET         &mo RAISE       &kp RALT
            >;
        };

        hrm_r_mid_layer { // RAlt from right 'K'
            bindings = <
            // Left Hand (Opposite hand - RAlt + key)                                                      // Right Hand (Same hand as K - normal keys, HRMs are base keys)
            &kp RA(TAB)     &kp RA(Q)       &kp RA(W)       &kp RA(E)       &kp RA(R)       &kp RA(T)       &kp Y           &kp U           &kp I           &kp O           &kp P           &kp BSPC
            &kp RA(CAPSLOCK)&kp RA(A)       &kp RA(S)       &kp RA(D)       &kp RA(F)       &kp RA(G)       &kp H           &kp J           &kp K           &kp L           &kp SEMI        &kp SQT
            &trans          &kp RA(Z)       &kp RA(X)       &kp RA(C)       &kp RA(V)       &kp RA(B)       &kp N           &kp M           &kp COMMA       &kp DOT         &kp FSLH        &mo LOWER
                                                            &kp RA(LCTRL)   &kp RA(LGUI)    &kp RA(SPACE)   &kp RET         &mo RAISE       &kp RALT
            >;
        };

        hrm_r_ring_layer { // RShift from right 'L'
            bindings = <
            // Left Hand (Opposite hand - RShift + key)                                                    // Right Hand (Same hand as L - normal keys, HRMs are base keys)
            &kp RS(TAB)     &kp RS(Q)       &kp RS(W)       &kp RS(E)       &kp RS(R)       &kp RS(T)       &kp Y           &kp U           &kp I           &kp O           &kp P           &kp BSPC
            &kp RS(CAPSLOCK)&kp RS(A)       &kp RS(S)       &kp RS(D)       &kp RS(F)       &kp RS(G)       &kp H           &kp J           &kp K           &kp L           &kp SEMI        &kp SQT
            &trans          &kp RS(Z)       &kp RS(X)       &kp RS(C)       &kp RS(V)       &kp RS(B)       &kp N           &kp M           &kp COMMA       &kp DOT         &kp FSLH        &mo LOWER
                                                            &kp RS(LCTRL)   &kp RS(LGUI)    &kp RS(SPACE)   &kp RET         &mo RAISE       &kp RALT
            >;
        };

        hrm_r_pnky_layer { // RGui from right 'SEMI'
            bindings = <
            // Left Hand (Opposite hand - RGui + key)                                                      // Right Hand (Same hand as SEMI - normal keys, HRMs are base keys)
            &kp RG(TAB)     &kp RG(Q)       &kp RG(W)       &kp RG(E)       &kp RG(R)       &kp RG(T)       &kp Y           &kp U           &kp I           &kp O           &kp P           &kp BSPC
            &kp RG(CAPSLOCK)&kp RG(A)       &kp RG(S)       &kp RG(D)       &kp RG(F)       &kp RG(G)       &kp H           &kp J           &kp K           &kp L           &kp SEMI        &kp SQT
            &trans          &kp RG(Z)       &kp RG(X)       &kp RG(C)       &kp RG(V)       &kp RG(B)       &kp N           &kp M           &kp COMMA       &kp DOT         &kp FSLH        &mo LOWER
                                                            &kp RG(LCTRL)   &kp RG(LGUI)    &kp RG(SPACE)   &kp RET         &mo RAISE       &kp RALT
            >;
        };
    };
};
