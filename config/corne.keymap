/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// Layer definitions

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define TOP     3

// Home Row Mods configuration

#define DIFFICULTY_LEVEL  0  // 0:custom, 1:easy -> 5:hard

// Set default tapping term (if DIFFICULTY_LEVEL=0)

#ifndef TAPPING_RESOLUTION

#define TAPPING_RESOLUTION 150  // Custom value (150ms)

#endif

// Configure the tapping term based on difficulty level
#ifdef DIFFICULTY_LEVEL
    #if DIFFICULTY_LEVEL > 0 && DIFFICULTY_LEVEL < 6
        #ifndef TAPPING_RESOLUTION

#define TAPPING_RESOLUTION ((6 - DIFFICULTY_LEVEL) * 100)

#endif
    #endif
#endif

// Define holds for bilateral (cross-hand) activation

#define ENFORCE_BILATERAL    // cancels single-handed home row mod+tap

// Set the mod keys for home row (pinky to index: super, alt, ctrl, shift)

#define PINKY_FINGER_MOD LGUI  // Super/GUI
#define RING1_FINGER_MOD LALT  // Alt
#define MIDDY_FINGER_MOD LCTL  // Ctrl
#define INDEX_FINGER_MOD LSFT  // Shift

// Define holding times for each finger

#ifndef HOMEY_HOLDING_TIME

#define HOMEY_HOLDING_TIME (TAPPING_RESOLUTION + 90)

#endif
#ifndef INDEX_HOLDING_TIME

#define INDEX_HOLDING_TIME (TAPPING_RESOLUTION + 20)

#endif
#ifndef MIDDY_HOLDING_TIME

#define MIDDY_HOLDING_TIME (TAPPING_RESOLUTION + 60)

#endif
#ifndef RING1_HOLDING_TIME

#define RING1_HOLDING_TIME (TAPPING_RESOLUTION + 90)

#endif
#ifndef PINKY_HOLDING_TIME

#define PINKY_HOLDING_TIME (TAPPING_RESOLUTION + 110)

#endif

// Define streak decay times
#ifndef HOMEY_STREAK_DECAY

#define HOMEY_STREAK_DECAY TAPPING_RESOLUTION

#endif
#ifndef INDEX_STREAK_DECAY

#define INDEX_STREAK_DECAY (TAPPING_RESOLUTION - 50)

#endif
#ifndef MIDDY_STREAK_DECAY

#define MIDDY_STREAK_DECAY HOMEY_STREAK_DECAY

#endif
#ifndef RING1_STREAK_DECAY

#define RING1_STREAK_DECAY HOMEY_STREAK_DECAY

#endif
#ifndef PINKY_STREAK_DECAY

#define PINKY_STREAK_DECAY HOMEY_STREAK_DECAY

#endif

// Define repeat decay times
#ifndef HOMEY_REPEAT_DECAY

#define HOMEY_REPEAT_DECAY (TAPPING_RESOLUTION + 150)

#endif
#ifndef INDEX_REPEAT_DECAY

#define INDEX_REPEAT_DECAY (TAPPING_RESOLUTION + 150)

#endif
#ifndef MIDDY_REPEAT_DECAY

#define MIDDY_REPEAT_DECAY HOMEY_REPEAT_DECAY

#endif
#ifndef RING1_REPEAT_DECAY

#define RING1_REPEAT_DECAY HOMEY_REPEAT_DECAY

#endif
#ifndef PINKY_REPEAT_DECAY

#define PINKY_REPEAT_DECAY HOMEY_REPEAT_DECAY

#endif

// Define key position groups for home row mods

#define LEFT_HAND_KEYS 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29  // left-hand keys
#define RIGHT_HAND_KEYS 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35  // right-hand keys
#define THUMB_KEYS 36 37 38 39 40 41  // thumb keys

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        // Home Row Mods - Left Hand
        // Pinky - LGUI/Super (A key)

        hml_pinky: hml_pinky {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";

            #ifdef ENFORCE_BILATERAL

            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            #endif
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <PINKY_HOLDING_TIME>;
            quick-tap-ms = <PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        // Ring - LALT (S key)

        hml_ring: hml_ring {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";

            #ifdef ENFORCE_BILATERAL

            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            #endif
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RING1_HOLDING_TIME>;
            quick-tap-ms = <RING1_REPEAT_DECAY>;
            require-prior-idle-ms = <RING1_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        // Middle - LCTL (D key)

        hml_middle: hml_middle {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";

            #ifdef ENFORCE_BILATERAL

            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            #endif
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <MIDDY_HOLDING_TIME>;
            quick-tap-ms = <MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        // Index - LSFT (F key)

        hml_index: hml_index {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";

            #ifdef ENFORCE_BILATERAL

            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            #endif
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <INDEX_HOLDING_TIME>;
            quick-tap-ms = <INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        // Home Row Mods - Right Hand
        // Index - RSFT (J key)

        hmr_index: hmr_index {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";

            #ifdef ENFORCE_BILATERAL

            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            #endif
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <INDEX_HOLDING_TIME>;
            quick-tap-ms = <INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        // Middle - RCTL (K key)

        hmr_middle: hmr_middle {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";

            #ifdef ENFORCE_BILATERAL

            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            #endif
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <MIDDY_HOLDING_TIME>;
            quick-tap-ms = <MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        // Ring - RALT (L key)

        hmr_ring: hmr_ring {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";

            #ifdef ENFORCE_BILATERAL

            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            #endif
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RING1_HOLDING_TIME>;
            quick-tap-ms = <RING1_REPEAT_DECAY>;
            require-prior-idle-ms = <RING1_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        // Pinky - RGUI/Super (;/: key)

        hmr_pinky: hmr_pinky {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";

            #ifdef ENFORCE_BILATERAL

            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            #endif
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <PINKY_HOLDING_TIME>;
            quick-tap-ms = <PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB       &kp Q              &kp W             &kp E                       &kp R                    &kp T        &kp Y    &kp U                     &kp I                        &kp O             &kp P                 &kp BSPC
&kp CAPSLOCK  &hml_pinky LGUI A  &hml_ring LALT S  &hml_middle LEFT_CONTROL D  &hml_index LEFT_SHIFT F  &kp G        &kp H    &hmr_index RIGHT_SHIFT J  &hmr_middle RIGHT_CONTROL K  &hmr_ring RALT L  &hmr_pinky RGUI SEMI  &kp SQT
&kp LSHFT     &kp Z              &kp X             &kp C                       &kp V                    &kp B        &kp N    &kp M                     &kp COMMA                    &kp DOT           &kp FSLH              &mo 1
                                                   &kp LCTRL                   &kp LGUI                 &kp SPACE    &kp RET  &mo 2                     &kp RALT
            >;
        };

        lower_layer {
            bindings = <
&kp TAB    &kp EXCL  &kp AT_SIGN  &kp HASH      &kp DLLR      &kp PRCNT           &kp CARET  &kp AMPS   &kp STAR        &kp LPAR         &kp RPAR  &kp DEL
&trans     &trans    &trans       &kp C_VOL_DN  &kp C_VOL_UP  &kp K_MUTE          &kp LEFT   &kp DOWN   &kp UP          &kp RIGHT        &kp LBKT  &kp GRAVE
&kp LSHFT  &trans    &trans       &kp C_PREV    &kp C_NEXT    &kp C_PLAY_PAUSE    &kp MINUS  &kp EQUAL  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp BSLH  &trans
                                  &trans        &trans        &trans              &trans     &trans     &trans
            >;
        };

        top_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  BRIGHT_UP  |  BRIGHT_DOWN  |  VOL_DOWN  |  VOL_UP  |  MUTE  |      |  -  |  7  |  8  |  9  |  +  | BKSP |
            // | CTRL |             |               |             |         |        |      |  .  |  4  |  5  |  6  |  -  |  `   |
            // | SHFT |             |              |             |          |        |      |  0  |  1  |  2  |  3  |  *  |  /   |
            //                      |              |             |          |         |     |     |     |

            bindings = <
&trans     &kp C_BRI_DN  &kp C_BRI_UP  &kp C_VOL_DN  &kp C_VOL_UP     &kp K_MUTE    &kp KP_N7  &kp KP_N8  &kp KP_N9   &kp KP_PLUS      &trans         &kp BSPC
&trans     &trans        &trans        &trans        &rgb_ug RGB_TOG  &bl BL_TOG    &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_MINUS     &trans         &trans
&kp LSHFT  &trans        &trans        &trans        &trans           &trans        &kp KP_N1  &kp KP_N2  &kp KP_N3   &kp KP_MULTIPLY  &kp KP_DIVIDE  &trans
                                       &kp LCTRL     &kp LEFT_GUI     &trans        &kp KP_N0  &trans     &kp KP_DOT
            >;
        };

        Symbols {
            bindings = <
&kp PIPE              &kp LEFT_BRACE        &kp SQT        &kp GRAVE       &kp DOUBLE_QUOTES  &kp RIGHT_BRACE          &trans          &trans          &trans        &trans           &trans  &trans
&kp NON_US_BACKSLASH  &kp LEFT_PARENTHESIS  &kp LESS_THAN  &kp EQUAL       &kp GREATER_THAN   &kp RIGHT_PARENTHESIS    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans  &trans
&kp QUESTION          &kp LEFT_BRACKET      &kp MINUS      &kp UNDERSCORE  &kp PLUS           &kp RIGHT_BRACKET        &trans          &trans          &trans        &trans           &trans  &trans
                                                           &kp COLON       &kp SLASH          &kp TILDE                &trans          &trans          &trans
            >;
        };

        Number {
            bindings = <
&trans  &mt EXCLAMATION NUMBER_1  &mt AT_SIGN NUMBER_2  &mt HASH NUMBER_3  &mt DOLLAR NUMBER_4  &mt PERCENT N5    &mt CARET NUMBER_6  &mt AMPERSAND N7  &mt ASTERISK N8  &mt LEFT_PARENTHESIS N9  &mt RIGHT_PARENTHESIS N0  &trans
&trans  &trans                    &trans                &trans             &trans               &trans            &trans              &trans            &trans           &trans                   &trans                    &trans
&trans  &trans                    &trans                &trans             &trans               &trans            &trans              &trans            &trans           &trans                   &trans                    &trans
                                                        &trans             &trans               &trans            &trans              &trans            &trans
            >;
        };
    };
};
